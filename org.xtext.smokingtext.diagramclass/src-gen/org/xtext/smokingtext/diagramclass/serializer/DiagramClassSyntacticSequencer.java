/*
 * generated by Xtext
 */
package org.xtext.smokingtext.diagramclass.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.smokingtext.diagramclass.services.DiagramClassGrammarAccess;

@SuppressWarnings("all")
public class DiagramClassSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DiagramClassGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Abstract_ColonKeyword_3_q;
	protected AbstractElementAlias match_Attribute___LeftSquareBracketKeyword_5_0_0_NumberTerminalRuleCall_5_0_1_a_RightSquareBracketKeyword_5_0_2__q;
	protected AbstractElementAlias match_Attribute___LessThanSignExclamationMarkGreaterThanSignKeyword_1_1_or_LessThanSignGreaterThanSignKeyword_1_0__q;
	protected AbstractElementAlias match_BiRelation_AsteriskKeyword_1_1_q_or___NumberTerminalRuleCall_1_0_0_p_FullStopFullStopKeyword_1_0_1_0___AsteriskKeyword_1_0_1_1_1_or_NumberTerminalRuleCall_1_0_1_1_0_p____;
	protected AbstractElementAlias match_BiRelation_AsteriskKeyword_7_1_q_or___NumberTerminalRuleCall_7_0_0_p_FullStopFullStopKeyword_7_0_1_0___AsteriskKeyword_7_0_1_1_1_or_NumberTerminalRuleCall_7_0_1_1_0_p____;
	protected AbstractElementAlias match_Class_ColonKeyword_2_q;
	protected AbstractElementAlias match_Enumeration___IDTerminalRuleCall_4_0_CommaKeyword_4_1_q__a;
	protected AbstractElementAlias match_paramIn_CommaKeyword_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DiagramClassGrammarAccess) access;
		match_Abstract_ColonKeyword_3_q = new TokenAlias(false, true, grammarAccess.getAbstractAccess().getColonKeyword_3());
		match_Attribute___LeftSquareBracketKeyword_5_0_0_NumberTerminalRuleCall_5_0_1_a_RightSquareBracketKeyword_5_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAttributeAccess().getLeftSquareBracketKeyword_5_0_0()), new TokenAlias(true, true, grammarAccess.getAttributeAccess().getNumberTerminalRuleCall_5_0_1()), new TokenAlias(false, false, grammarAccess.getAttributeAccess().getRightSquareBracketKeyword_5_0_2()));
		match_Attribute___LessThanSignExclamationMarkGreaterThanSignKeyword_1_1_or_LessThanSignGreaterThanSignKeyword_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getAttributeAccess().getLessThanSignExclamationMarkGreaterThanSignKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getAttributeAccess().getLessThanSignGreaterThanSignKeyword_1_0()));
		match_BiRelation_AsteriskKeyword_1_1_q_or___NumberTerminalRuleCall_1_0_0_p_FullStopFullStopKeyword_1_0_1_0___AsteriskKeyword_1_0_1_1_1_or_NumberTerminalRuleCall_1_0_1_1_0_p____ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(true, false, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getBiRelationAccess().getFullStopFullStopKeyword_1_0_1_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBiRelationAccess().getAsteriskKeyword_1_0_1_1_1()), new TokenAlias(true, false, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_1_0_1_1_0()))), new TokenAlias(false, true, grammarAccess.getBiRelationAccess().getAsteriskKeyword_1_1()));
		match_BiRelation_AsteriskKeyword_7_1_q_or___NumberTerminalRuleCall_7_0_0_p_FullStopFullStopKeyword_7_0_1_0___AsteriskKeyword_7_0_1_1_1_or_NumberTerminalRuleCall_7_0_1_1_0_p____ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(true, false, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_7_0_0()), new TokenAlias(false, false, grammarAccess.getBiRelationAccess().getFullStopFullStopKeyword_7_0_1_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBiRelationAccess().getAsteriskKeyword_7_0_1_1_1()), new TokenAlias(true, false, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_7_0_1_1_0()))), new TokenAlias(false, true, grammarAccess.getBiRelationAccess().getAsteriskKeyword_7_1()));
		match_Class_ColonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getClassAccess().getColonKeyword_2());
		match_Enumeration___IDTerminalRuleCall_4_0_CommaKeyword_4_1_q__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getEnumerationAccess().getIDTerminalRuleCall_4_0()), new TokenAlias(false, true, grammarAccess.getEnumerationAccess().getCommaKeyword_4_1()));
		match_paramIn_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getParamInAccess().getCommaKeyword_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getBodyVisibilityRule())
			return getBodyVisibilityToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getClassVisibilityRule())
			return getClassVisibilityToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNumberRule())
			return getnumberToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BodyVisibility:
	 * 	"+" | "-" | "#"
	 * ;
	 */
	protected String getBodyVisibilityToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * ClassVisibility:
	 * 	"+" | "-" 
	 * ;
	 */
	protected String getClassVisibilityToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal number: 
	 * 	('0'..'9')
	 * ;
	 */
	protected String getnumberToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Abstract_ColonKeyword_3_q.equals(syntax))
				emit_Abstract_ColonKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Attribute___LeftSquareBracketKeyword_5_0_0_NumberTerminalRuleCall_5_0_1_a_RightSquareBracketKeyword_5_0_2__q.equals(syntax))
				emit_Attribute___LeftSquareBracketKeyword_5_0_0_NumberTerminalRuleCall_5_0_1_a_RightSquareBracketKeyword_5_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Attribute___LessThanSignExclamationMarkGreaterThanSignKeyword_1_1_or_LessThanSignGreaterThanSignKeyword_1_0__q.equals(syntax))
				emit_Attribute___LessThanSignExclamationMarkGreaterThanSignKeyword_1_1_or_LessThanSignGreaterThanSignKeyword_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_BiRelation_AsteriskKeyword_1_1_q_or___NumberTerminalRuleCall_1_0_0_p_FullStopFullStopKeyword_1_0_1_0___AsteriskKeyword_1_0_1_1_1_or_NumberTerminalRuleCall_1_0_1_1_0_p____.equals(syntax))
				emit_BiRelation_AsteriskKeyword_1_1_q_or___NumberTerminalRuleCall_1_0_0_p_FullStopFullStopKeyword_1_0_1_0___AsteriskKeyword_1_0_1_1_1_or_NumberTerminalRuleCall_1_0_1_1_0_p____(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_BiRelation_AsteriskKeyword_7_1_q_or___NumberTerminalRuleCall_7_0_0_p_FullStopFullStopKeyword_7_0_1_0___AsteriskKeyword_7_0_1_1_1_or_NumberTerminalRuleCall_7_0_1_1_0_p____.equals(syntax))
				emit_BiRelation_AsteriskKeyword_7_1_q_or___NumberTerminalRuleCall_7_0_0_p_FullStopFullStopKeyword_7_0_1_0___AsteriskKeyword_7_0_1_1_1_or_NumberTerminalRuleCall_7_0_1_1_0_p____(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Class_ColonKeyword_2_q.equals(syntax))
				emit_Class_ColonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Enumeration___IDTerminalRuleCall_4_0_CommaKeyword_4_1_q__a.equals(syntax))
				emit_Enumeration___IDTerminalRuleCall_4_0_CommaKeyword_4_1_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_paramIn_CommaKeyword_3_q.equals(syntax))
				emit_paramIn_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     classname=ID (ambiguity) ',' implements=ID
	 *     classname=ID (ambiguity) '{' '}' (rule end)
	 *     classname=ID (ambiguity) '{' body+=Attribute
	 *     classname=ID (ambiguity) '{' body+=Method
	 *     classname=ID (ambiguity) extension=ID
	 */
	protected void emit_Abstract_ColonKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' number* ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=ID (ambiguity) (rule end)
	 */
	protected void emit_Attribute___LeftSquareBracketKeyword_5_0_0_NumberTerminalRuleCall_5_0_1_a_RightSquareBracketKeyword_5_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('<>' | '<!>')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) BodyVisibility (ambiguity) attributename=ID
	 */
	protected void emit_Attribute___LessThanSignExclamationMarkGreaterThanSignKeyword_1_1_or_LessThanSignGreaterThanSignKeyword_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'? | (number+ '..' (number+ | '*'))
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '[' (ambiguity) ']' '-' linkName=ID
	 */
	protected void emit_BiRelation_AsteriskKeyword_1_1_q_or___NumberTerminalRuleCall_1_0_0_p_FullStopFullStopKeyword_1_0_1_0___AsteriskKeyword_1_0_1_1_1_or_NumberTerminalRuleCall_1_0_1_1_0_p____(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'? | (number+ '..' (number+ | '*'))
	 *
	 * This ambiguous syntax occurs at:
	 *     linkName=ID '->' '[' (ambiguity) ']' (rule end)
	 */
	protected void emit_BiRelation_AsteriskKeyword_7_1_q_or___NumberTerminalRuleCall_7_0_0_p_FullStopFullStopKeyword_7_0_1_0___AsteriskKeyword_7_0_1_1_1_or_NumberTerminalRuleCall_7_0_1_1_0_p____(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     classname=ID (ambiguity) ',' implements=ID
	 *     classname=ID (ambiguity) '{' '}' (rule end)
	 *     classname=ID (ambiguity) '{' body+=Attribute
	 *     classname=ID (ambiguity) '{' body+=Dependancy
	 *     classname=ID (ambiguity) '{' body+=Method
	 *     classname=ID (ambiguity) extension=ID
	 */
	protected void emit_Class_ColonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ID ','?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     classname=ID '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_Enumeration___IDTerminalRuleCall_4_0_CommaKeyword_4_1_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=ID (ambiguity) (rule end)
	 */
	protected void emit_paramIn_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
