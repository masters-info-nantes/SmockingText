/*
 * generated by Xtext
 */
grammar InternalDiagramClass;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.smokingtext.diagramclass.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.smokingtext.diagramclass.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.smokingtext.diagramclass.services.DiagramClassGrammarAccess;

}

@parser::members {

 	private DiagramClassGrammarAccess grammarAccess;
 	
    public InternalDiagramClassParser(TokenStream input, DiagramClassGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DiagramClassGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackagePackageParserRuleCall_0()); 
	    }
		lv_package_0_0=rulePackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"package",
        		lv_package_0_0, 
        		"Package");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleElements
entryRuleElements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementsRule()); }
	 iv_ruleElements=ruleElements 
	 { $current=$iv_ruleElements.current; } 
	 EOF 
;

// Rule Elements
ruleElements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementsAccess().getClassParserRuleCall_0()); 
    }
    this_Class_0=ruleClass
    { 
        $current = $this_Class_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementsAccess().getInterfaceParserRuleCall_1()); 
    }
    this_Interface_1=ruleInterface
    { 
        $current = $this_Interface_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementsAccess().getAbstractParserRuleCall_2()); 
    }
    this_Abstract_2=ruleAbstract
    { 
        $current = $this_Abstract_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementsAccess().getEnumerationParserRuleCall_3()); 
    }
    this_Enumeration_3=ruleEnumeration
    { 
        $current = $this_Enumeration_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClassAccess().getClassVisibilityParserRuleCall_0()); 
    }
ruleClassVisibility
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_classname_1_0=RULE_ID
		{
			newLeafNode(lv_classname_1_0, grammarAccess.getClassAccess().getClassnameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"classname",
        		lv_classname_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getColonKeyword_2());
    }
)?(
(
		lv_extension_3_0=RULE_ID
		{
			newLeafNode(lv_extension_3_0, grammarAccess.getClassAccess().getExtensionIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"extension",
        		lv_extension_3_0, 
        		"ID");
	    }

)
)?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getCommaKeyword_4_0());
    }
(
(
		lv_implements_5_0=RULE_ID
		{
			newLeafNode(lv_implements_5_0, grammarAccess.getClassAccess().getImplementsIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"implements",
        		lv_implements_5_0, 
        		"ID");
	    }

)
))*	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getBodyAttributeParserRuleCall_6_0_0()); 
	    }
		lv_body_7_1=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_7_1, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getBodyMethodParserRuleCall_6_0_1()); 
	    }
		lv_body_7_2=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_7_2, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getBodyDependancyParserRuleCall_6_0_2()); 
	    }
		lv_body_7_3=ruleDependancy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_7_3, 
        		"Dependancy");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleDependancy
entryRuleDependancy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependancyRule()); }
	 iv_ruleDependancy=ruleDependancy 
	 { $current=$iv_ruleDependancy.current; } 
	 EOF 
;

// Rule Dependancy
ruleDependancy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDependancyAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDependancyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependancyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnumerationAccess().getClassVisibilityParserRuleCall_0()); 
    }
ruleClassVisibility
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='e' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumerationAccess().getEKeyword_1());
    }
(
(
		lv_classname_2_0=RULE_ID
		{
			newLeafNode(lv_classname_2_0, grammarAccess.getEnumerationAccess().getClassnameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"classname",
        		lv_classname_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_3());
    }
(this_ID_4=RULE_ID
    { 
    newLeafNode(this_ID_4, grammarAccess.getEnumerationAccess().getIDTerminalRuleCall_4_0()); 
    }
(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumerationAccess().getCommaKeyword_4_1());
    }
)?)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInterfaceAccess().getClassVisibilityParserRuleCall_0()); 
    }
ruleClassVisibility
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='i' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceAccess().getIKeyword_1());
    }
(
(
		lv_interfacename_2_0=RULE_ID
		{
			newLeafNode(lv_interfacename_2_0, grammarAccess.getInterfaceAccess().getInterfacenameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"interfacename",
        		lv_interfacename_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getBodyMethodParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAbstract
entryRuleAbstract returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractRule()); }
	 iv_ruleAbstract=ruleAbstract 
	 { $current=$iv_ruleAbstract.current; } 
	 EOF 
;

// Rule Abstract
ruleAbstract returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractAccess().getClassVisibilityParserRuleCall_0()); 
    }
ruleClassVisibility
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='a' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbstractAccess().getAKeyword_1());
    }
(
(
		lv_classname_2_0=RULE_ID
		{
			newLeafNode(lv_classname_2_0, grammarAccess.getAbstractAccess().getClassnameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"classname",
        		lv_classname_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbstractAccess().getColonKeyword_3());
    }
)?(
(
		lv_extension_4_0=RULE_ID
		{
			newLeafNode(lv_extension_4_0, grammarAccess.getAbstractAccess().getExtensionIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"extension",
        		lv_extension_4_0, 
        		"ID");
	    }

)
)?(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAbstractAccess().getCommaKeyword_5_0());
    }
(
(
		lv_implements_6_0=RULE_ID
		{
			newLeafNode(lv_implements_6_0, grammarAccess.getAbstractAccess().getImplementsIDTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"implements",
        		lv_implements_6_0, 
        		"ID");
	    }

)
))*	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAbstractAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractAccess().getBodyAttributeParserRuleCall_7_0_0()); 
	    }
		lv_body_8_1=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_8_1, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAbstractAccess().getBodyMethodParserRuleCall_7_0_1()); 
	    }
		lv_body_8_2=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_8_2, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAbstractAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleBiRelation
entryRuleBiRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBiRelationRule()); }
	 iv_ruleBiRelation=ruleBiRelation 
	 { $current=$iv_ruleBiRelation.current; } 
	 EOF 
;

// Rule BiRelation
ruleBiRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBiRelationAccess().getLeftSquareBracketKeyword_0());
    }
(((this_number_1=RULE_NUMBER
    { 
    newLeafNode(this_number_1, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_1_0_0()); 
    }
)+(	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBiRelationAccess().getFullStopFullStopKeyword_1_0_1_0());
    }
((this_number_3=RULE_NUMBER
    { 
    newLeafNode(this_number_3, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_1_0_1_1_0()); 
    }
)+
    |	otherlv_4='*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBiRelationAccess().getAsteriskKeyword_1_0_1_1_1());
    }
)))
    |	otherlv_5='*' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBiRelationAccess().getAsteriskKeyword_1_1());
    }
)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBiRelationAccess().getRightSquareBracketKeyword_2());
    }
	otherlv_7='-' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBiRelationAccess().getHyphenMinusKeyword_3());
    }
(
(
		lv_linkName_8_0=RULE_ID
		{
			newLeafNode(lv_linkName_8_0, grammarAccess.getBiRelationAccess().getLinkNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBiRelationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"linkName",
        		lv_linkName_8_0, 
        		"ID");
	    }

)
)	otherlv_9='->' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBiRelationAccess().getHyphenMinusGreaterThanSignKeyword_5());
    }
	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBiRelationAccess().getLeftSquareBracketKeyword_6());
    }
(((this_number_11=RULE_NUMBER
    { 
    newLeafNode(this_number_11, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_7_0_0()); 
    }
)+(	otherlv_12='..' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getBiRelationAccess().getFullStopFullStopKeyword_7_0_1_0());
    }
((this_number_13=RULE_NUMBER
    { 
    newLeafNode(this_number_13, grammarAccess.getBiRelationAccess().getNumberTerminalRuleCall_7_0_1_1_0()); 
    }
)+
    |	otherlv_14='*' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getBiRelationAccess().getAsteriskKeyword_7_0_1_1_1());
    }
)))
    |	otherlv_15='*' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getBiRelationAccess().getAsteriskKeyword_7_1());
    }
)?	otherlv_16=']' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getBiRelationAccess().getRightSquareBracketKeyword_8());
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getBodyVisibilityParserRuleCall_0()); 
    }
ruleBodyVisibility
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='<>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getLessThanSignGreaterThanSignKeyword_1_0());
    }

    |	otherlv_2='<!>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getLessThanSignExclamationMarkGreaterThanSignKeyword_1_1());
    }
)?(
(
		lv_attributename_3_0=RULE_ID
		{
			newLeafNode(lv_attributename_3_0, grammarAccess.getAttributeAccess().getAttributenameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attributename",
        		lv_attributename_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getColonKeyword_3());
    }
(
(
		lv_type_5_0=RULE_ID
		{
			newLeafNode(lv_type_5_0, grammarAccess.getAttributeAccess().getTypeIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"ID");
	    }

)
)((	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttributeAccess().getLeftSquareBracketKeyword_5_0_0());
    }
(this_number_7=RULE_NUMBER
    { 
    newLeafNode(this_number_7, grammarAccess.getAttributeAccess().getNumberTerminalRuleCall_5_0_1()); 
    }
)*	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAttributeAccess().getRightSquareBracketKeyword_5_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getBirelationBiRelationParserRuleCall_5_1_0()); 
	    }
		lv_birelation_9_0=ruleBiRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"birelation",
        		lv_birelation_9_0, 
        		"BiRelation");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleparamIn
entryRuleparamIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamInRule()); }
	 iv_ruleparamIn=ruleparamIn 
	 { $current=$iv_ruleparamIn.current; } 
	 EOF 
;

// Rule paramIn
ruleparamIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParamInAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamInRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamInAccess().getColonKeyword_1());
    }
(
(
		lv_type_2_0=RULE_ID
		{
			newLeafNode(lv_type_2_0, grammarAccess.getParamInAccess().getTypeIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamInRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParamInAccess().getCommaKeyword_3());
    }
)?)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMethodAccess().getBodyVisibilityParserRuleCall_0()); 
    }
ruleBodyVisibility
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamParamInParserRuleCall_3_0()); 
	    }
		lv_param_3_0=ruleparamIn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"paramIn");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getColonKeyword_5_0());
    }
(
(
		lv_returnType_6_0=RULE_ID
		{
			newLeafNode(lv_returnType_6_0, grammarAccess.getMethodAccess().getReturnTypeIDTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"returnType",
        		lv_returnType_6_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRuleBodyVisibility
entryRuleBodyVisibility returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyVisibilityRule()); } 
	 iv_ruleBodyVisibility=ruleBodyVisibility 
	 { $current=$iv_ruleBodyVisibility.current.getText(); }  
	 EOF 
;

// Rule BodyVisibility
ruleBodyVisibility returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBodyVisibilityAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBodyVisibilityAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBodyVisibilityAccess().getNumberSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleClassVisibility
entryRuleClassVisibility returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassVisibilityRule()); } 
	 iv_ruleClassVisibility=ruleClassVisibility 
	 { $current=$iv_ruleClassVisibility.current.getText(); }  
	 EOF 
;

// Rule ClassVisibility
ruleClassVisibility returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassVisibilityAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassVisibilityAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getNamePackageNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=rulePackageName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"PackageName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPackageAccess().getLeftSquareBracketLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getClassTypeElementsParserRuleCall_2_0()); 
	    }
		lv_classType_2_0=ruleElements		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"classType",
        		lv_classType_2_0, 
        		"Elements");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getSubPackagePackageParserRuleCall_3_0()); 
	    }
		lv_subPackage_3_0=rulePackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"subPackage",
        		lv_subPackage_3_0, 
        		"Package");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=']]' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPackageAccess().getRightSquareBracketRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRulePackageName
entryRulePackageName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageNameRule()); } 
	 iv_rulePackageName=rulePackageName 
	 { $current=$iv_rulePackageName.current.getText(); }  
	 EOF 
;

// Rule PackageName
rulePackageName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPackageNameAccess().getIDTerminalRuleCall_0()); 
    }
)?(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackageNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getPackageNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_NUMBER : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


