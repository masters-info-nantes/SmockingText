/*
 * generated by Xtext
 */
package org.xtext.smokingtext.diagramclass.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DiagramClassGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsPackageParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Package*;
		@Override public ParserRule getRule() { return rule; }

		//greetings+=Package*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Package
		public RuleCall getGreetingsPackageParserRuleCall_0() { return cGreetingsPackageParserRuleCall_0; }
	}

	public class ElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Elements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumerationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Elements:
		//	Class | Interface | Abstract | Enumeration;
		@Override public ParserRule getRule() { return rule; }

		//Class | Interface | Abstract | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }

		//Abstract
		public RuleCall getAbstractParserRuleCall_2() { return cAbstractParserRuleCall_2; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_3() { return cEnumerationParserRuleCall_3; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassVisibilityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cClassnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassnameIDTerminalRuleCall_1_0 = (RuleCall)cClassnameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExtensionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtensionIDTerminalRuleCall_3_0 = (RuleCall)cExtensionAssignment_3.eContents().get(0);
		private final Assignment cImplementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImplementsImplementsParserRuleCall_4_0 = (RuleCall)cImplementsAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cBodyAlternatives_6_0 = (Alternatives)cBodyAssignment_6.eContents().get(0);
		private final RuleCall cBodyAttributeParserRuleCall_6_0_0 = (RuleCall)cBodyAlternatives_6_0.eContents().get(0);
		private final RuleCall cBodyMethodParserRuleCall_6_0_1 = (RuleCall)cBodyAlternatives_6_0.eContents().get(1);
		private final RuleCall cBodyDependancyParserRuleCall_6_0_2 = (RuleCall)cBodyAlternatives_6_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	ClassVisibility classname=ID ":"? extension=ID? implements=Implements* "{" body+=(Attribute | Method | Dependancy)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//ClassVisibility classname=ID ":"? extension=ID? implements=Implements* "{" body+=(Attribute | Method | Dependancy)* "}"
		public Group getGroup() { return cGroup; }

		//ClassVisibility
		public RuleCall getClassVisibilityParserRuleCall_0() { return cClassVisibilityParserRuleCall_0; }

		//classname=ID
		public Assignment getClassnameAssignment_1() { return cClassnameAssignment_1; }

		//ID
		public RuleCall getClassnameIDTerminalRuleCall_1_0() { return cClassnameIDTerminalRuleCall_1_0; }

		//":"?
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//extension=ID?
		public Assignment getExtensionAssignment_3() { return cExtensionAssignment_3; }

		//ID
		public RuleCall getExtensionIDTerminalRuleCall_3_0() { return cExtensionIDTerminalRuleCall_3_0; }

		//implements=Implements*
		public Assignment getImplementsAssignment_4() { return cImplementsAssignment_4; }

		//Implements
		public RuleCall getImplementsImplementsParserRuleCall_4_0() { return cImplementsImplementsParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//body+=(Attribute | Method | Dependancy)*
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Attribute | Method | Dependancy
		public Alternatives getBodyAlternatives_6_0() { return cBodyAlternatives_6_0; }

		//Attribute
		public RuleCall getBodyAttributeParserRuleCall_6_0_0() { return cBodyAttributeParserRuleCall_6_0_0; }

		//Method
		public RuleCall getBodyMethodParserRuleCall_6_0_1() { return cBodyMethodParserRuleCall_6_0_1; }

		//Dependancy
		public RuleCall getBodyDependancyParserRuleCall_6_0_2() { return cBodyDependancyParserRuleCall_6_0_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ImplementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Implements:
		//	","? ID;
		@Override public ParserRule getRule() { return rule; }

		//","? ID
		public Group getGroup() { return cGroup; }

		//","?
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class DependancyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependancy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Dependancy:
		//	"->" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"->" name=ID
		public Group getGroup() { return cGroup; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassVisibilityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassnameIDTerminalRuleCall_2_0 = (RuleCall)cClassnameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cCommaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration:
		//	ClassVisibility "e" classname=ID "{" (ID ","?)* "}";
		@Override public ParserRule getRule() { return rule; }

		//ClassVisibility "e" classname=ID "{" (ID ","?)* "}"
		public Group getGroup() { return cGroup; }

		//ClassVisibility
		public RuleCall getClassVisibilityParserRuleCall_0() { return cClassVisibilityParserRuleCall_0; }

		//"e"
		public Keyword getEKeyword_1() { return cEKeyword_1; }

		//classname=ID
		public Assignment getClassnameAssignment_2() { return cClassnameAssignment_2; }

		//ID
		public RuleCall getClassnameIDTerminalRuleCall_2_0() { return cClassnameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(ID ","?)*
		public Group getGroup_4() { return cGroup_4; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_0() { return cIDTerminalRuleCall_4_0; }

		//","?
		public Keyword getCommaKeyword_4_1() { return cCommaKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassVisibilityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodnameIDTerminalRuleCall_2_0 = (RuleCall)cMethodnameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyMethodParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Interface:
		//	ClassVisibility "i" methodname=ID "{" body+=Method* "}";
		@Override public ParserRule getRule() { return rule; }

		//ClassVisibility "i" methodname=ID "{" body+=Method* "}"
		public Group getGroup() { return cGroup; }

		//ClassVisibility
		public RuleCall getClassVisibilityParserRuleCall_0() { return cClassVisibilityParserRuleCall_0; }

		//"i"
		public Keyword getIKeyword_1() { return cIKeyword_1; }

		//methodname=ID
		public Assignment getMethodnameAssignment_2() { return cMethodnameAssignment_2; }

		//ID
		public RuleCall getMethodnameIDTerminalRuleCall_2_0() { return cMethodnameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//body+=Method*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Method
		public RuleCall getBodyMethodParserRuleCall_4_0() { return cBodyMethodParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abstract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassVisibilityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassnameIDTerminalRuleCall_2_0 = (RuleCall)cClassnameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExtensionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionIDTerminalRuleCall_4_0 = (RuleCall)cExtensionAssignment_4.eContents().get(0);
		private final Assignment cImplementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImplementsImplementsParserRuleCall_5_0 = (RuleCall)cImplementsAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cBodyAlternatives_7_0 = (Alternatives)cBodyAssignment_7.eContents().get(0);
		private final RuleCall cBodyAttributeParserRuleCall_7_0_0 = (RuleCall)cBodyAlternatives_7_0.eContents().get(0);
		private final RuleCall cBodyMethodParserRuleCall_7_0_1 = (RuleCall)cBodyAlternatives_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Abstract:
		//	ClassVisibility "a" classname=ID ":"? extension=ID? implements=Implements* "{" body+=(Attribute | Method)* "}";
		@Override public ParserRule getRule() { return rule; }

		//ClassVisibility "a" classname=ID ":"? extension=ID? implements=Implements* "{" body+=(Attribute | Method)* "}"
		public Group getGroup() { return cGroup; }

		//ClassVisibility
		public RuleCall getClassVisibilityParserRuleCall_0() { return cClassVisibilityParserRuleCall_0; }

		//"a"
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//classname=ID
		public Assignment getClassnameAssignment_2() { return cClassnameAssignment_2; }

		//ID
		public RuleCall getClassnameIDTerminalRuleCall_2_0() { return cClassnameIDTerminalRuleCall_2_0; }

		//":"?
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//extension=ID?
		public Assignment getExtensionAssignment_4() { return cExtensionAssignment_4; }

		//ID
		public RuleCall getExtensionIDTerminalRuleCall_4_0() { return cExtensionIDTerminalRuleCall_4_0; }

		//implements=Implements*
		public Assignment getImplementsAssignment_5() { return cImplementsAssignment_5; }

		//Implements
		public RuleCall getImplementsImplementsParserRuleCall_5_0() { return cImplementsImplementsParserRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//body+=(Attribute | Method)*
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//Attribute | Method
		public Alternatives getBodyAlternatives_7_0() { return cBodyAlternatives_7_0; }

		//Attribute
		public RuleCall getBodyAttributeParserRuleCall_7_0_0() { return cBodyAttributeParserRuleCall_7_0_0; }

		//Method
		public RuleCall getBodyMethodParserRuleCall_7_0_1() { return cBodyMethodParserRuleCall_7_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class BiRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BiRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cNumberTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1_1 = (Alternatives)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cNumberTerminalRuleCall_1_0_1_1_0 = (RuleCall)cAlternatives_1_0_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1_1_1 = (Keyword)cAlternatives_1_0_1_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinkNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinkNameIDTerminalRuleCall_4_0 = (RuleCall)cLinkNameAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final RuleCall cNumberTerminalRuleCall_7_0_0 = (RuleCall)cGroup_7_0.eContents().get(0);
		private final Group cGroup_7_0_1 = (Group)cGroup_7_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_7_0_1_0 = (Keyword)cGroup_7_0_1.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_1 = (Alternatives)cGroup_7_0_1.eContents().get(1);
		private final RuleCall cNumberTerminalRuleCall_7_0_1_1_0 = (RuleCall)cAlternatives_7_0_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_7_0_1_1_1 = (Keyword)cAlternatives_7_0_1_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BiRelation:
		//	"[" (number+ (".." (number+ | "*")) | "*")? "]" "-" linkName=ID "->" "[" (number+ (".." (number+ | "*")) | "*")? "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" (number+ (".." (number+ | "*")) | "*")? "]" "-" linkName=ID "->" "[" (number+ (".." (number+ | "*")) | "*")? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(number+ (".." (number+ | "*")) | "*")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//number+ (".." (number+ | "*"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//number+
		public RuleCall getNumberTerminalRuleCall_1_0_0() { return cNumberTerminalRuleCall_1_0_0; }

		//".." (number+ | "*")
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_0_1_0() { return cFullStopFullStopKeyword_1_0_1_0; }

		//number+ | "*"
		public Alternatives getAlternatives_1_0_1_1() { return cAlternatives_1_0_1_1; }

		//number+
		public RuleCall getNumberTerminalRuleCall_1_0_1_1_0() { return cNumberTerminalRuleCall_1_0_1_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_1_1_1() { return cAsteriskKeyword_1_0_1_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }

		//linkName=ID
		public Assignment getLinkNameAssignment_4() { return cLinkNameAssignment_4; }

		//ID
		public RuleCall getLinkNameIDTerminalRuleCall_4_0() { return cLinkNameIDTerminalRuleCall_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//(number+ (".." (number+ | "*")) | "*")?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//number+ (".." (number+ | "*"))
		public Group getGroup_7_0() { return cGroup_7_0; }

		//number+
		public RuleCall getNumberTerminalRuleCall_7_0_0() { return cNumberTerminalRuleCall_7_0_0; }

		//".." (number+ | "*")
		public Group getGroup_7_0_1() { return cGroup_7_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_7_0_1_0() { return cFullStopFullStopKeyword_7_0_1_0; }

		//number+ | "*"
		public Alternatives getAlternatives_7_0_1_1() { return cAlternatives_7_0_1_1; }

		//number+
		public RuleCall getNumberTerminalRuleCall_7_0_1_1_0() { return cNumberTerminalRuleCall_7_0_1_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_7_0_1_1_1() { return cAsteriskKeyword_7_0_1_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_7_1() { return cAsteriskKeyword_7_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBodyVisibilityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignExclamationMarkGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cAttributenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributenameIDTerminalRuleCall_2_0 = (RuleCall)cAttributenameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeIDTerminalRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final RuleCall cNumberTerminalRuleCall_5_0_1 = (RuleCall)cGroup_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Assignment cBirelationAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cBirelationBiRelationParserRuleCall_5_1_0 = (RuleCall)cBirelationAssignment_5_1.eContents().get(0);
		
		//Attribute:
		//	BodyVisibility ("<>" | "<!>")? attributename=ID ":" type=ID ("[" number* "]" | birelation=BiRelation)?;
		@Override public ParserRule getRule() { return rule; }

		//BodyVisibility ("<>" | "<!>")? attributename=ID ":" type=ID ("[" number* "]" | birelation=BiRelation)?
		public Group getGroup() { return cGroup; }

		//BodyVisibility
		public RuleCall getBodyVisibilityParserRuleCall_0() { return cBodyVisibilityParserRuleCall_0; }

		//("<>" | "<!>")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_1_0() { return cLessThanSignGreaterThanSignKeyword_1_0; }

		//"<!>"
		public Keyword getLessThanSignExclamationMarkGreaterThanSignKeyword_1_1() { return cLessThanSignExclamationMarkGreaterThanSignKeyword_1_1; }

		//attributename=ID
		public Assignment getAttributenameAssignment_2() { return cAttributenameAssignment_2; }

		//ID
		public RuleCall getAttributenameIDTerminalRuleCall_2_0() { return cAttributenameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=ID
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_4_0() { return cTypeIDTerminalRuleCall_4_0; }

		//("[" number* "]" | birelation=BiRelation)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"[" number* "]"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0_0() { return cLeftSquareBracketKeyword_5_0_0; }

		//number*
		public RuleCall getNumberTerminalRuleCall_5_0_1() { return cNumberTerminalRuleCall_5_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_0_2() { return cRightSquareBracketKeyword_5_0_2; }

		//birelation=BiRelation
		public Assignment getBirelationAssignment_5_1() { return cBirelationAssignment_5_1; }

		//BiRelation
		public RuleCall getBirelationBiRelationParserRuleCall_5_1_0() { return cBirelationBiRelationParserRuleCall_5_1_0; }
	}

	public class ParamInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//paramIn:
		//	name=ID ":" type=ID ","?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" type=ID ","?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBodyVisibilityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamParamInParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeIDTerminalRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		
		//Method:
		//	BodyVisibility name=ID "(" param+=paramIn* ")" (":" returnType=ID)?;
		@Override public ParserRule getRule() { return rule; }

		//BodyVisibility name=ID "(" param+=paramIn* ")" (":" returnType=ID)?
		public Group getGroup() { return cGroup; }

		//BodyVisibility
		public RuleCall getBodyVisibilityParserRuleCall_0() { return cBodyVisibilityParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//param+=paramIn*
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//paramIn
		public RuleCall getParamParamInParserRuleCall_3_0() { return cParamParamInParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" returnType=ID)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//returnType=ID
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }

		//ID
		public RuleCall getReturnTypeIDTerminalRuleCall_5_1_0() { return cReturnTypeIDTerminalRuleCall_5_1_0; }
	}

	public class BodyVisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyVisibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BodyVisibility:
		//	"+" | "-" | "#";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-" | "#"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"#"
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
	}

	public class ClassVisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassVisibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ClassVisibility:
		//	"+" | "-";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassTypeElementsParserRuleCall_3_0 = (RuleCall)cClassTypeAssignment_3.eContents().get(0);
		private final Assignment cSubPackageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubPackagePackageParserRuleCall_4_0 = (RuleCall)cSubPackageAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Package:
		//	name=ID? ("." ID)* "[[" classType+=Elements* subPackage+=Package? "]]";
		@Override public ParserRule getRule() { return rule; }

		//name=ID? ("." ID)* "[[" classType+=Elements* subPackage+=Package? "]]"
		public Group getGroup() { return cGroup; }

		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_2() { return cLeftSquareBracketLeftSquareBracketKeyword_2; }

		//classType+=Elements*
		public Assignment getClassTypeAssignment_3() { return cClassTypeAssignment_3; }

		//Elements
		public RuleCall getClassTypeElementsParserRuleCall_3_0() { return cClassTypeElementsParserRuleCall_3_0; }

		//subPackage+=Package?
		public Assignment getSubPackageAssignment_4() { return cSubPackageAssignment_4; }

		//Package
		public RuleCall getSubPackagePackageParserRuleCall_4_0() { return cSubPackagePackageParserRuleCall_4_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_5() { return cRightSquareBracketRightSquareBracketKeyword_5; }
	}
	
	
	private final ModelElements pModel;
	private final ElementsElements pElements;
	private final ClassElements pClass;
	private final ImplementsElements pImplements;
	private final DependancyElements pDependancy;
	private final EnumerationElements pEnumeration;
	private final InterfaceElements pInterface;
	private final AbstractElements pAbstract;
	private final BiRelationElements pBiRelation;
	private final AttributeElements pAttribute;
	private final ParamInElements pParamIn;
	private final MethodElements pMethod;
	private final BodyVisibilityElements pBodyVisibility;
	private final ClassVisibilityElements pClassVisibility;
	private final TerminalRule tNumber;
	private final PackageElements pPackage;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DiagramClassGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElements = new ElementsElements();
		this.pClass = new ClassElements();
		this.pImplements = new ImplementsElements();
		this.pDependancy = new DependancyElements();
		this.pEnumeration = new EnumerationElements();
		this.pInterface = new InterfaceElements();
		this.pAbstract = new AbstractElements();
		this.pBiRelation = new BiRelationElements();
		this.pAttribute = new AttributeElements();
		this.pParamIn = new ParamInElements();
		this.pMethod = new MethodElements();
		this.pBodyVisibility = new BodyVisibilityElements();
		this.pClassVisibility = new ClassVisibilityElements();
		this.tNumber = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "number");
		this.pPackage = new PackageElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.smokingtext.diagramclass.DiagramClass".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Package*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Elements:
	//	Class | Interface | Abstract | Enumeration;
	public ElementsElements getElementsAccess() {
		return pElements;
	}
	
	public ParserRule getElementsRule() {
		return getElementsAccess().getRule();
	}

	//Class:
	//	ClassVisibility classname=ID ":"? extension=ID? implements=Implements* "{" body+=(Attribute | Method | Dependancy)*
	//	"}";
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Implements:
	//	","? ID;
	public ImplementsElements getImplementsAccess() {
		return pImplements;
	}
	
	public ParserRule getImplementsRule() {
		return getImplementsAccess().getRule();
	}

	//Dependancy:
	//	"->" name=ID;
	public DependancyElements getDependancyAccess() {
		return pDependancy;
	}
	
	public ParserRule getDependancyRule() {
		return getDependancyAccess().getRule();
	}

	//Enumeration:
	//	ClassVisibility "e" classname=ID "{" (ID ","?)* "}";
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//Interface:
	//	ClassVisibility "i" methodname=ID "{" body+=Method* "}";
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Abstract:
	//	ClassVisibility "a" classname=ID ":"? extension=ID? implements=Implements* "{" body+=(Attribute | Method)* "}";
	public AbstractElements getAbstractAccess() {
		return pAbstract;
	}
	
	public ParserRule getAbstractRule() {
		return getAbstractAccess().getRule();
	}

	//BiRelation:
	//	"[" (number+ (".." (number+ | "*")) | "*")? "]" "-" linkName=ID "->" "[" (number+ (".." (number+ | "*")) | "*")? "]";
	public BiRelationElements getBiRelationAccess() {
		return pBiRelation;
	}
	
	public ParserRule getBiRelationRule() {
		return getBiRelationAccess().getRule();
	}

	//Attribute:
	//	BodyVisibility ("<>" | "<!>")? attributename=ID ":" type=ID ("[" number* "]" | birelation=BiRelation)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//paramIn:
	//	name=ID ":" type=ID ","?;
	public ParamInElements getParamInAccess() {
		return pParamIn;
	}
	
	public ParserRule getParamInRule() {
		return getParamInAccess().getRule();
	}

	//Method:
	//	BodyVisibility name=ID "(" param+=paramIn* ")" (":" returnType=ID)?;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//BodyVisibility:
	//	"+" | "-" | "#";
	public BodyVisibilityElements getBodyVisibilityAccess() {
		return pBodyVisibility;
	}
	
	public ParserRule getBodyVisibilityRule() {
		return getBodyVisibilityAccess().getRule();
	}

	//ClassVisibility:
	//	"+" | "-";
	public ClassVisibilityElements getClassVisibilityAccess() {
		return pClassVisibility;
	}
	
	public ParserRule getClassVisibilityRule() {
		return getClassVisibilityAccess().getRule();
	}

	//terminal number:
	//	"0".."9";
	public TerminalRule getNumberRule() {
		return tNumber;
	} 

	//Package:
	//	name=ID? ("." ID)* "[[" classType+=Elements* subPackage+=Package? "]]";
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
