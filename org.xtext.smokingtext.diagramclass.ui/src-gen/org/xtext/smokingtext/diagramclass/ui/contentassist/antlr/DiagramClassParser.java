/*
 * generated by Xtext
 */
package org.xtext.smokingtext.diagramclass.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.smokingtext.diagramclass.services.DiagramClassGrammarAccess;

public class DiagramClassParser extends AbstractContentAssistParser {
	
	@Inject
	private DiagramClassGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.smokingtext.diagramclass.ui.contentassist.antlr.internal.InternalDiagramClassParser createParser() {
		org.xtext.smokingtext.diagramclass.ui.contentassist.antlr.internal.InternalDiagramClassParser result = new org.xtext.smokingtext.diagramclass.ui.contentassist.antlr.internal.InternalDiagramClassParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementsAccess().getAlternatives(), "rule__Elements__Alternatives");
					put(grammarAccess.getClassAccess().getBodyAlternatives_6_0(), "rule__Class__BodyAlternatives_6_0");
					put(grammarAccess.getAbstractAccess().getBodyAlternatives_7_0(), "rule__Abstract__BodyAlternatives_7_0");
					put(grammarAccess.getBiRelationAccess().getAlternatives_1(), "rule__BiRelation__Alternatives_1");
					put(grammarAccess.getBiRelationAccess().getAlternatives_1_0_1_1(), "rule__BiRelation__Alternatives_1_0_1_1");
					put(grammarAccess.getBiRelationAccess().getAlternatives_7(), "rule__BiRelation__Alternatives_7");
					put(grammarAccess.getBiRelationAccess().getAlternatives_7_0_1_1(), "rule__BiRelation__Alternatives_7_0_1_1");
					put(grammarAccess.getAttributeAccess().getAlternatives_1(), "rule__Attribute__Alternatives_1");
					put(grammarAccess.getAttributeAccess().getAlternatives_5(), "rule__Attribute__Alternatives_5");
					put(grammarAccess.getBodyVisibilityAccess().getAlternatives(), "rule__BodyVisibility__Alternatives");
					put(grammarAccess.getClassVisibilityAccess().getAlternatives(), "rule__ClassVisibility__Alternatives");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getImplementsAccess().getGroup(), "rule__Implements__Group__0");
					put(grammarAccess.getDependancyAccess().getGroup(), "rule__Dependancy__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_4(), "rule__Enumeration__Group_4__0");
					put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
					put(grammarAccess.getAbstractAccess().getGroup(), "rule__Abstract__Group__0");
					put(grammarAccess.getBiRelationAccess().getGroup(), "rule__BiRelation__Group__0");
					put(grammarAccess.getBiRelationAccess().getGroup_1_0(), "rule__BiRelation__Group_1_0__0");
					put(grammarAccess.getBiRelationAccess().getGroup_1_0_1(), "rule__BiRelation__Group_1_0_1__0");
					put(grammarAccess.getBiRelationAccess().getGroup_7_0(), "rule__BiRelation__Group_7_0__0");
					put(grammarAccess.getBiRelationAccess().getGroup_7_0_1(), "rule__BiRelation__Group_7_0_1__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_5_0(), "rule__Attribute__Group_5_0__0");
					put(grammarAccess.getParamInAccess().getGroup(), "rule__ParamIn__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getPackageAccess().getGroup_1(), "rule__Package__Group_1__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
					put(grammarAccess.getClassAccess().getClassnameAssignment_1(), "rule__Class__ClassnameAssignment_1");
					put(grammarAccess.getClassAccess().getExtensionAssignment_3(), "rule__Class__ExtensionAssignment_3");
					put(grammarAccess.getClassAccess().getImplementsAssignment_4(), "rule__Class__ImplementsAssignment_4");
					put(grammarAccess.getClassAccess().getBodyAssignment_6(), "rule__Class__BodyAssignment_6");
					put(grammarAccess.getDependancyAccess().getNameAssignment_1(), "rule__Dependancy__NameAssignment_1");
					put(grammarAccess.getEnumerationAccess().getClassnameAssignment_2(), "rule__Enumeration__ClassnameAssignment_2");
					put(grammarAccess.getInterfaceAccess().getInterfacenameAssignment_2(), "rule__Interface__InterfacenameAssignment_2");
					put(grammarAccess.getInterfaceAccess().getBodyAssignment_4(), "rule__Interface__BodyAssignment_4");
					put(grammarAccess.getAbstractAccess().getClassnameAssignment_2(), "rule__Abstract__ClassnameAssignment_2");
					put(grammarAccess.getAbstractAccess().getExtensionAssignment_4(), "rule__Abstract__ExtensionAssignment_4");
					put(grammarAccess.getAbstractAccess().getImplementsAssignment_5(), "rule__Abstract__ImplementsAssignment_5");
					put(grammarAccess.getAbstractAccess().getBodyAssignment_7(), "rule__Abstract__BodyAssignment_7");
					put(grammarAccess.getBiRelationAccess().getLinkNameAssignment_4(), "rule__BiRelation__LinkNameAssignment_4");
					put(grammarAccess.getAttributeAccess().getAttributenameAssignment_2(), "rule__Attribute__AttributenameAssignment_2");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_4(), "rule__Attribute__TypeAssignment_4");
					put(grammarAccess.getAttributeAccess().getBirelationAssignment_5_1(), "rule__Attribute__BirelationAssignment_5_1");
					put(grammarAccess.getParamInAccess().getNameAssignment_0(), "rule__ParamIn__NameAssignment_0");
					put(grammarAccess.getParamInAccess().getTypeAssignment_2(), "rule__ParamIn__TypeAssignment_2");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getParamAssignment_3(), "rule__Method__ParamAssignment_3");
					put(grammarAccess.getMethodAccess().getReturnTypeAssignment_5_1(), "rule__Method__ReturnTypeAssignment_5_1");
					put(grammarAccess.getPackageAccess().getNameAssignment_0(), "rule__Package__NameAssignment_0");
					put(grammarAccess.getPackageAccess().getClassTypeAssignment_3(), "rule__Package__ClassTypeAssignment_3");
					put(grammarAccess.getPackageAccess().getSubPackageAssignment_4(), "rule__Package__SubPackageAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.smokingtext.diagramclass.ui.contentassist.antlr.internal.InternalDiagramClassParser typedParser = (org.xtext.smokingtext.diagramclass.ui.contentassist.antlr.internal.InternalDiagramClassParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DiagramClassGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DiagramClassGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
